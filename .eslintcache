[{"/Users/kurupongwanpen/Desktop/true/react/underscore-to-camelcase/src/reportWebVitals.js":"1","/Users/kurupongwanpen/Desktop/true/react/underscore-to-camelcase/src/App.js":"2","/Users/kurupongwanpen/Desktop/true/react/underscore-to-camelcase/src/index.js":"3","/Users/kurupongwanpen/Desktop/true/react/underscore-to-camelcase/src/data.js":"4"},{"size":362,"mtime":1607659171480,"results":"5","hashOfConfig":"6"},{"size":6275,"mtime":1608172718590,"results":"7","hashOfConfig":"6"},{"size":500,"mtime":1607659171479,"results":"8","hashOfConfig":"6"},{"size":23410,"mtime":1608235455263,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19h5v5b",{"filePath":"12","messages":"13","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kurupongwanpen/Desktop/true/react/underscore-to-camelcase/src/reportWebVitals.js",[],"/Users/kurupongwanpen/Desktop/true/react/underscore-to-camelcase/src/App.js",["19","20","21","22","23","24","25"],"import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport forEach from 'lodash/forEach'\nimport split from 'lodash/split'\nimport includes from 'lodash/includes'\nimport FileSaver from 'file-saver'\n\nimport { data } from './data'\n\nconst underscoreToCamelcase = (v) => {\n  return v.toLowerCase().replace(/_([a-z0-9])/g, function (g) { return g[1].toUpperCase(); });\n}\n\nconst textbox = (list) => {\n  var selectRow = ''\n  var name = ''\n  var value = ''\n  var insertValue = ''\n  var updateText = ''\n  var dto1 = ''\n  var dto2 = ''\n  var type = ''\n  var model = ''\n  forEach(list, (v, index) => {\n    const set = underscoreToCamelcase(`set_${v.name}`)\n    const get = underscoreToCamelcase(`get_${v.type}`)\n\n\n    selectRow += `${v.name} AS ${underscoreToCamelcase(v.name)},\\n`\n    name += `${v.name}`\n    value = `${value}model.${underscoreToCamelcase(`get_${v.name}`)}()`\n    model = `${model}model.${underscoreToCamelcase(`get_${v.name}`)}()`\n    insertValue = `${insertValue}?`\n    updateText += `${v.name} = ?,\\n`\n    dto1 += `dto.${set}(${index + 1}, ${underscoreToCamelcase(v.name)});\\n`\n    dto2 += `dto.${set}(rs.${get}(\"${underscoreToCamelcase(v.name)}\"));\\n`\n    type += `private ${v.type} ${underscoreToCamelcase(v.name)};\\n`\n    if (index + 1 !== list.length) {\n      name = `${name}, `\n      insertValue = `${insertValue}, `\n      value = `${value} +\",\"+ `\n      model = `${model}, `\n    }\n  })\n\n  const line = \"\\n=================\\n\\n\"\n  const result = `${selectRow}${line}${updateText}${line}${`(${name}) VALUES (${value});\\n`}${line}${`(${name}) value (${insertValue});\\n`}${line}{${model}};\\n${line}${dto1}${line}${dto2}${line}${type}`\n\n  return (\n    <textarea id=\"textbox\" value={result}>Type something here</textarea>\n  )\n}\n\nconst saveFile = (name) => {\n  const fileName = name === '' ? 'undefined' : name\n  const textbox = document.getElementById('textbox');\n  const file = makeTextFile(textbox.value)\n  FileSaver.saveAs(file, `${fileName}.txt`);\n}\n\nconst makeTextFile = (text) => {\n  var textFile = null\n  var data = new Blob([text], { type: 'text/plain;charset=utf-8' });\n  if (textFile !== null) {\n    window.URL.revokeObjectURL(textFile);\n  }\n  textFile = window.URL.createObjectURL(data);\n  return textFile;\n};\n\nfunction App() {\n  const initList = { name: '', type: 'string' }\n  const [list, setList] = useState([initList])\n  const [fileName, setFileName] = useState('')\n  const [text, setText] = useState('')\n\n  useEffect(() => {\n    const name = async (params) => {\n      forEach(data, async (v, i) => {\n        const text = v.data\n        const valueReplace = text.replace(/\\t/g, \"\").replace(/\\n/g, \"\").replace(/\" /g, \";\").replace(/ /g, \"\").replace(/\"/g, \"\")\n        const valueSplit = split(valueReplace, ',')\n\n        const mm = valueSplit.map((v) => {\n          const tSplit = split(v, ';')\n          return { name: tSplit[0], type: getType(tSplit[1]) }\n        })\n\n        var selectRow = ''\n        var name = ''\n        var value = ''\n        var insertValue = ''\n        var updateText = ''\n        var dto1 = ''\n        var dto2 = ''\n        var type = ''\n        var model = ''\n        var check = ''\n        forEach(mm, (v, index) => {\n          const setName = underscoreToCamelcase(`set_${v.name}`)\n          const getName = underscoreToCamelcase(`get_${v.name}`)\n          const get = underscoreToCamelcase(`get_${v.type}`)\n\n          selectRow += `${v.name} AS ${underscoreToCamelcase(v.name)},\\n`\n          name += `${v.name}`\n          value = `${value}model.${getName}()`\n          model = `${model}model.${getName}()`\n          insertValue = `${insertValue}?`\n          updateText += `${v.name} = ?,\\n`\n          dto1 += `dto.${setName}(${index + 1}, ${underscoreToCamelcase(v.name)});\\n`\n          dto2 += `dto.${setName}(rs.${get}(\"${underscoreToCamelcase(v.name)}\"));\\n`\n\n          const checkIf = v.type === 'String' ? `!${v.type}Utill.isNull(info.${getName}())` : `null != info.${getName}()`\n          check += `if (${checkIf}) model.${setName}(info.${getName}());\\n`\n          type += `private ${v.type} ${underscoreToCamelcase(v.name)};\\n`\n          if (index + 1 !== mm.length) {\n            name = `${name}, `\n            insertValue = `${insertValue}, `\n            value = `${value} +\",\"+ `\n            model = `${model}, `\n          }\n        })\n        setTimeout(() => {\n          const line = \"=================\\n\"\n          const result =\n            `${selectRow}\n            ${line}\n            ${updateText}\n            ${line}\n            ${`(${name}) VALUES (${value});\\n`}\n            ${line}${`(${name}) value (${insertValue});\\n`}\n            ${line}{${model}};\\n\n            ${line}\n            ${dto1}\n            ${line}\n            ${dto2}\n            ${line}\n            ${check}\n            ${line}\n            ${type}\n            `\n\n          const file = makeTextFile(result.replace(/ {12}/g, \"\"))\n          FileSaver.saveAs(file, `${v.name}.txt`);\n        }, i * 1000);\n      })\n    }\n    name()\n  }, [])\n\n  const getType = (value) => {\n    if (includes(value, 'NUMBER')) return 'BigDecimal'\n    if (includes(value, 'DATE')) return 'Date'\n    if (includes(value, 'TIMESTAMP')) return 'Date'\n    if (includes(value, 'BLOB')) return 'Blob'\n\n    return 'String'\n  }\n\n  const handleOnChangeText = (v) => {\n    const { value } = v.target\n    const valueReplace = value.replace(/, \\n\\t/g, \",\").replace(/,\"/g, \";\")\n    const valueSplit = split(valueReplace, ';')\n\n    const data = valueSplit.map((v) => {\n      const t = v.replace(/\" /g, ';').replace(/\"/g, '')\n      const tSplit = split(t, ';')\n      return { name: tSplit[0], type: getType(tSplit[1]) }\n    })\n    setList(data)\n    setText(value)\n  }\n\n  return (\n    <div className=\"container\">\n      <h2>{data.length}</h2>\n      {/* <div className=\"container-left\">\n        <br />\n        <br />\n        <textarea value={text} onChange={handleOnChangeText}></textarea>\n      </div>\n      <div className=\"container-right\">\n        <div className=\"input-row\">\n          <span>Table Name</span>\n          <input value={fileName} onChange={(v) => setFileName(v.target.value)} />\n          <button onClick={() => saveFile(fileName)}>save</button>\n        </div>\n        {textbox(list)}\n      </div> */}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/kurupongwanpen/Desktop/true/react/underscore-to-camelcase/src/index.js",[],"/Users/kurupongwanpen/Desktop/true/react/underscore-to-camelcase/src/data.js",[],{"ruleId":"26","severity":1,"message":"27","line":14,"column":7,"nodeType":"28","messageId":"29","endLine":14,"endColumn":14},{"ruleId":"26","severity":1,"message":"30","line":54,"column":7,"nodeType":"28","messageId":"29","endLine":54,"endColumn":15},{"ruleId":"26","severity":1,"message":"31","line":73,"column":10,"nodeType":"28","messageId":"29","endLine":73,"endColumn":14},{"ruleId":"26","severity":1,"message":"32","line":74,"column":10,"nodeType":"28","messageId":"29","endLine":74,"endColumn":18},{"ruleId":"26","severity":1,"message":"33","line":74,"column":20,"nodeType":"28","messageId":"29","endLine":74,"endColumn":31},{"ruleId":"26","severity":1,"message":"34","line":75,"column":10,"nodeType":"28","messageId":"29","endLine":75,"endColumn":14},{"ruleId":"26","severity":1,"message":"35","line":160,"column":9,"nodeType":"28","messageId":"29","endLine":160,"endColumn":27},"no-unused-vars","'textbox' is assigned a value but never used.","Identifier","unusedVar","'saveFile' is assigned a value but never used.","'list' is assigned a value but never used.","'fileName' is assigned a value but never used.","'setFileName' is assigned a value but never used.","'text' is assigned a value but never used.","'handleOnChangeText' is assigned a value but never used."]